
if(Meteor.isServer){

	// If this is the first time this is run, there may be no Planes in the DB (Think Meteor deployment)
	// We can't do file scraping like we did, but we can just cheat and give it the last-known-good version of the card names
	if(Planes.find().count() == 0){
		var planes = ["academy at tolaria west", "agyrem", "akoum", "aretopolis", "astral arena", "bant", "bloodhill bastion", "chaotic aether", "cliffside market", "edge of malacol", "eloren wilds", "feeding grounds", "fields of summer", "furnace layer", "gavony", "glen elendra", "glimmervoid basin", "goldmeadow", "grand ossuary", "grixis", "grove of the dreampods", "hedron fields of agadeem", "immersturm", "interplanar tunnel", "isle of vesuva", "izzet steam maze", "jund", "kessig", "kharasha foothills", "kilnspire district", "krosa", "lair of the ashen idol", "lethe lake", "llanowar", "minamo", "morphic tide", "mount keralia", "murasa", "mutual epiphany", "naar isle", "naya", "nephalia", "norn's dominion", "onakke catacomb", "orochi colony", "orzhova", "otaria", "panopticon", "planewide disaster", "pools of becoming", "prahv", "quicksilver sea", "raven's run", "reality shaping", "sanctum of serra", "sea of sand", "selesnya loft gardens", "shiv", "skybreen", "sokenzan", "spatial merging", "stairs to infinity", "stensia", "stronghold furnace", "takenuma", "talon gates", "tazeem", "the aether flues", "the dark barony", "the eon fog", "the fourth sphere", "the great forest", "the hippodrome", "the maelstrom", "the zephyr maze", "time distortion", "trail of the mage-rings", "truga jungle", "turri island", "undercity reaches", "velis vel", "windriddle palace" ];
		planes.forEach(function (planeName){
			Planes.insert({
				created: new Date(),
				name: planeName
			});
		})
	}


	Meteor.methods({
		/**
		 * Given a list of card IDs, create a Planechase Game
		 * @param  {[String]} desiredCards Collection of MongoDB Planechase Card IDs
		 * @return {Object}                JSON Planechase Game
		 */
		createPlanechaseGame: function (desiredCards){
			return PlaneGames.insert({
				startedBy: Meteor.userId(),
				startedAt: new Date(),
				planedeck: _.shuffle(desiredCards), 		//Potentially unsafe. Law 1: Thou shalt not trust thine user
				planecurrent: undefined,
				planegraveyard: [],
				finished: false
			});
		},
		/**
		 * Shortcut for MongoDB Game Removal of game owned by current player
		 */
		destroyPlanechaseGame: function(){
			PlaneGames.remove({startedBy: Meteor.userId()});
		},
		/**
		 * Draw the next Planechase Card from the deck to current
		 */
		drawNextPlane: function(){
			// Lookup the game using the player ID
			var planegame = PlaneGames.findOne({startedBy: Meteor.userId()});
			if(!planegame) return;

			// Put the current plane in the graveyard
			if(planegame.planecurrent) planegame.planegraveyard.push(planegame.planecurrent);
			
			// Shuffle the graveyard into the deck if it's empty
			if(planegame.planedeck.length === 0){
				planegame.planedeck = _.shuffle(planegame.planegraveyard);
				planegame.planegraveyard = [];
			}

			// Put the first card from the deck onto the board
			planegame.planecurrent = planegame.planedeck.pop();

			// Update the game
			PlaneGames.update({_id: planegame._id}, planegame);
		}
	})	
}




	/*
	the list of the data above was generated by pasting all the images in one folder and running the code below
	var loadData = false;

	function parseFiles (err, files){
		files.forEach(function(filename){
			var lenOfTail = 7; // '.hq.jpg'
			var name = filename.substr(0, filename.length - lenOfTail);

			var plane = Planes.findOne({name: name});
			if(!plane || !plane._id)
			{ 
				Planes.insert({created: new Date(), name: name});
				console.log("Created " + name);
			}
		})
	}

	if(loadData){
		console.log("Loading Planechase Data")
		FS = Meteor.npmRequire('fs');

		var planes = process.env.PWD + "/public/images/planechase/";
		FS.readdir(planes, Meteor.bindEnvironment(parseFiles));
	}*/